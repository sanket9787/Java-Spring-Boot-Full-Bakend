Create database TransactionDemoDB;

use TransactionDemoDB;

CREATE TABLE ACCOUNTS(
    BALANCE INT NOT NULL,
    ACCOUNT_ID INT PRIMARY KEY AUTO_INCREMENT,
    ACCOUNT_HOLDER VARCHAR(50)
);

DESC ACCOUNTS;

INSERT INTO ACCOUNTS (ACCOUNT_HOLDER, BALANCE) VALUES ('ABC', 1000), ('XYZ', 2000);

SELECT * FROM ACCOUNTS;


-- SO WHEN WE DO THIS START TRANSACTION AND IN THE END COMMIT, IF WHILE EXECUTING ANY QUERY IN BETWEEN IF THE SYSTEM CRASHES OR ANYTHING HAPPENS THEN THE ALL TRANSACTIONS REVERTS BACK. SUCCESSFULL TRANSACTIONS ONLY HAPPENS WHEN COMMIT QUERY EXECUTES.
START TRANSACTION;
UPDATE ACCOUNTS SET BALANCE = BALANCE - 200 WHERE ACCOUNT_HOLDER = 'ABC';

UPDATE ACCOUNTS SET BALANCE = BALANCE + 200 WHERE ACCOUNT_HOLDER = 'XYZ';
COMMIT;


 -- DELIMITER IS THE CHARACTER WHICH DENOTES THE END OF THE STATEMENT IN MY SQL, BY DEFAULT ; 
DELIMITER $$
CREATE PROCEDURE TRANSFER()
BEGIN
    /* If the balance is less than zero then rollback, else commit */
    START TRANSACTION;
    IF ( (SELECT BALANCE FROM ACCOUNTS WHERE ACCOUNT_HOLDER = 'ABC' LIMIT 1) < 0 ) THEN 
        ROLLBACK;
    ELSE 
        UPDATE ACCOUNTS SET BALANCE = BALANCE - 200 WHERE ACCOUNT_HOLDER = 'ABC';
        UPDATE ACCOUNTS SET BALANCE = BALANCE + 200 WHERE ACCOUNT_HOLDER = 'XYZ';
        SELECT * FROM ACCOUNTS;
        COMMIT;
    END IF;
END$$
DELIMITER ;

SET SQL_SAFE_UPDATES = 0;

-- DROP PROCEDURE TRANSFER;
CALL TRANSFER();