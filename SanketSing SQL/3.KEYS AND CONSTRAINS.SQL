USE FBDB;

CREATE TABLE COMMENTS ( 
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CONTENT VARCHAR(255),
    USER_ID INT, -- THE USER WHO MADE THE COMMENT
    POST_ID INT, -- THE POST ON WHICH THE COMMENT IS MADE
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)

INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('NICE POST', 1, 2); --INSERT DATA INTO THE COMMENTS TABLE

INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('NICE POST', 1, 2); --INSERT DATA INTO THE COMMENTS TABLE

SELECT * FROM COMMENTS;

DELETE FROM COMMENTS;  --DELETES ALL OF THE ROWS, SLOWER (not the preffered way as it has to go each and every row and manually delete it)

TRUNCATE TABLE COMMENTS; -- DELETE ALL THE ROWS FROM THE TABLE, FASTER ( IT DROP THE TABLE AND RECREATES IT INSTEAD OF DELETING ROW BY ROW)


-- CREATE A TABLE FOR MANAGING THE LIKES
-- LIKES CAN BE DONE ON POASTS AND COMMENTS
-- ID , USER_ID , CREATED_AT , LIKEABLE_ID, LIKEABLE_TYPE (ENUM) (THIS COLUMN IS CREATED SO TAHT INSTEAD OF ADDING A SEPERATE COLUM FOR EACH LIEKABLE TYPE LIKE A POST, RELL, COMMENT JUST CREATE A ENUM COLUMN WHICH WILL STORE THIS TYPES AS A STRING)
-- 1, 1, 2021-01-01 12:00:00, 1, POST

CREATE TABLE LIKES(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LIKEABLE_ID INT,
    LIKEABLE_TYPE ENUM('POST', 'COMMENT')
);

INSERT INTO LIKES(USER_ID, LIKEABLE_ID, LIKEABLE_TYPE) VALUES
(1,1,'POST');  -- ISNERT INTO THE LIKES TABLE

INSERT INTO LIKES(USER_ID, LIKEABLE_ID, LIKEABLE_TYPE) VALUES
(1,1,'COMMENT');

SELECT * FROM LIKES;


-- NOW IF I WANT TO INTRODUCE A NEW LIKEABLE TYPE I CAN JUST MODIFY THE EXISTING LIKEABLE_TYPE COLUMN INSTEAD OF CREATING A NEW COLUMN

ALTER TABLE LIKES MODIFY LIKEABLE_TYPE ENUM('POST', 'COMMENT', 'REEL');

DESC LIKES;

INSERT INTO LIKES ( USER_ID, LIKEABLE_ID, LIKEABLE_TYPE) VALUES
(1, 1, 'REEL');



-- CONSTRAINTS 
-- IF WE USE THE ABOVE TABLE WE CAN DO THIS ALSO NOW WHICH IS WRONG WE CAN INSERT VALUE WITH NO USER_ID
INSERT INTO LIKES ( LIKEABLE_ID, LIKEABLE_TYPE) VALUES
(1, 'REEL')

SELECT * FROM LIKES;

-- HENCE CONTRAINTS ARE IMPORTANT
-- NOT NULL - Ensures that a column cannot have a NULL value
-- UNIQUE - Ensures that all values in a column are different
-- PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
-- FOREIGN KEY - Prevents actions that would destroy links between tables
-- CHECK - Ensures that the values in a column satisfies a specific condition
-- DEFAULT - Sets a default value for a column if no value is specified
-- CREATE INDEX - Used to create and retrieve data from the database very quickly

DROP TABLE LIKES;

CREATE TABLE LIEKS(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,  -- NOT NULL IS THE CONSTRAINT
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LIKEABLE_ID INT,
    LIKEABLE_TYPE ENUM('POST', 'COMMENT')
)


-- PROBLEM STATEMENT: IF WE CREATE A COMMENT THEN IT SHOULD HAVE SOME CHECK TO INDETIFY WHETHER THE POST EXISTS OR NOT AND THE USER EXISTS OR NOT 
-- SOLUTION:
-- WE CAN USE FOREIGN KEY HERE: A FOREIGN KEY IS A COLUMN OR A GROUP OF COLUMNS IN A TABLE THAT REFERENCE THE PRIMARY KEY OF ANOTHER TALBE. 

SELECT * FROM COMMENTS;
DROP TABLE COMMENTS;

-- NOW MAKE THE COMMENTS USING FOREIGN KEY CONSTRAINTS

DESC USERS;
DESC POSTS;
CREATE TABLE COMMENTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CONTENT VARCHAR(255),
    USER_ID INT, -- THE USER WHO MADE THE COMMENT
    POST_ID INT, -- THE POST ON WHICH THE COMMENT IS MADE
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (POST_ID) REFERENCES POSTS(ID)
);

INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('NICE POST', 1, 2); --INSERT DATA INTO THE TABLE

INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('NICE POST', 1, 2); --INSERT DATA INTO THE TABLE

DESC COMMENTS;

-- NOW IF WE TRY TO ADD THE CONTENT WHICH DOESENT EXIST FOR EG. POST_ID 200 DOES NOT EXIST IN THE POST TABLE
-- NOW AS IT IS THE FORIEGN KEY TO THIS COMMENTS TABLE IT WONT ALLOW TO INSERT THIS DATA INTO COMMENTS TABLE AS 200 POST DOES NOT EXIST.
INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('NICE POST', 1, 200); --INSERT DATA INTO THE TABLE

SELECT * FROM POSTS;

INSERT INTO COMMENTS (CONTENT, USER_ID, POST_ID) VALUES
('COMMENT INSERTED INTO POST', 1, 2); --INSERT DATA INTO THE TABLE

SELECT * FROM COMMENTS;